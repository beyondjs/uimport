const {sep} = require('path');

/**
 * Generate the esm bundled version of a package/subpath + its dependencies
 *
 * @param bundle {string} The package name + subpath
 * @param mode {string} Can be 'esm' or 'amd'
 * @param specs {{cwd: string, cache: string, temp: string, dependencies: boolean}}
 * @return {Promise<{errors: [string]}|any>}
 */
module.exports = async function (bundle, mode, specs) {
    if (typeof bundle !== 'string' || typeof mode !== 'string' || typeof specs !== 'object') {
        throw new Error('Invalid parameters');
    }

    // Dependencies are generated by default
    specs.dependencies = specs.dependencies === void 0 ? true : !!specs.dependencies;

    const build = async (bundle, cwd) => {
        const {cache, temp} = specs;
        return await require('./bundle')(bundle, mode, {cwd, cache, temp});
    }

    const {code, version, errors, warnings, dependencies} = await build(bundle, specs.cwd);

    if (specs.dependencies) {
        // Build the dependencies
        for (const dependency of dependencies) {
            const cwd = (() => {
                const split = dependency.path.split('node_modules');
                split.pop();
                return split.join(sep);
            })();
            const {errors} = await build(dependency.id, cwd);
            errors?.length && warnings.push(`Dependency "${dependency.id}" build returned errors`);
        }
    }

    return {errors, warnings, code, version, dependencies};
}
